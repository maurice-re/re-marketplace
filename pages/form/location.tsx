import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { useState } from "react";
import FormNextButton from "../../components/form/next-button";
import ProgressBar from "../../components/form/progress-bar";
import ReLogo from "../../components/form/re-logo";
import { cities } from "../../constants/cities";
import { useAppContext } from "../../context/context-provider";

const LocationPage: NextPage = () => {
  const [query, setQuery] = useState<string>("");
  const [context, setContext] = useAppContext();
  const [drawerOpen, toggleDrawer] = useState<boolean>();
  const [_, forceRender] = useState<number>(0);

  function handleClick(city: string) {
    if (context.locations.includes(city)) {
      context.removeLocation(city);
    } else {
      context.addLocation(city);
    }
    setContext(context);
    setQuery("");
    toggleDrawer(false);
    forceRender((prev) => prev + 1);
  }

  const options = cities
    .filter((city) => city.toLowerCase().startsWith(query.toLowerCase()))
    .map((city) => (
      <div
        key={city}
        className="flex justify-between p-2 hover:bg-re-green-500 border-b-2 hover:text-black text-white align-middle group"
        onMouseDown={() => handleClick(city)}
      >
        <div className=" text-25 pl-6 font-theinhardt-300">{city}</div>
        {context.locations.includes(city) ? (
          <div className="bg-re-green-500 h-6 w-6 group-hover:bg-white mr-5 rounded-full pl-1 my-auto">
            <Image src="/icons/check.png" height={10} width={15} />
          </div>
        ) : null}
      </div>
    ));

  const chosen = context.locations.map((city) => (
    <div
      className="bg-black text-sm text-white pr-2 py-1 rounded mr-3 my-1 flex border border-white font-theinhardt-300"
      key={city}
    >
      <button
        className="pl-1 pr-1 text-white hover:text-red-300"
        onClick={() => handleClick(city)}
      >
        &times;
      </button>
      <div>{city}</div>
    </div>
  ));

  const inputBorderRadius: string = drawerOpen
    ? " rounded-10 rounded-b-none"
    : " rounded-10";

  return (
    <div className=" w-screen h-screen bg-black flex">
      <Head>
        <title>Find your perfect setup</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <ProgressBar pageName={"location"} />
      <ReLogo />
      <main className="flex flex-col container mx-auto self-end h-2/3 items-center">
        <div className="">
          <h1 className=" text-5xl font-theinhardt text-white">
            What cities do you operate in?
          </h1>
          <div className=" text-sm italic self-right mb-14 font-theinhardt text-white ml-1">
            Select all that apply
          </div>
        </div>
        <div className="w-3/5 max-w-lg">
          <input
            className={
              "text-25 pl-8 py-2 border-2 border-white bg-black w-full text-white font-theinhardt-300" +
              inputBorderRadius
            }
            type="text"
            value={query}
            onFocus={() => toggleDrawer(true)}
            onBlur={() => toggleDrawer(false)}
            onChange={(e) => setQuery(e.target.value)}
            placeholder="Enter city..."
            required
          />
          {!drawerOpen && <div className="flex flex-wrap pt-2">{chosen}</div>}
          {drawerOpen && (
            <div className=" bg-black border-2 border-t-0 max-h-64 overflow-auto">
              {options}
            </div>
          )}
          {!drawerOpen && (
            <FormNextButton
              pageName={"location"}
              disabled={context.locations.length < 1}
              onClick={() => {
                context.addSummary();
                setContext(context);
              }}
              green
            />
          )}
        </div>
      </main>
    </div>
  );
};

export default LocationPage;
