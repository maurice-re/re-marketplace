import { loadStripe } from "@stripe/stripe-js";
import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import Link from "next/link";
import { useRouter } from "next/router";
import { useEffect, useState } from "react";
import ProgressBar from "../../components/form/progress-bar";
import ReLogo from "../../components/form/re-logo";
import { useAppContext } from "../../context/context-provider";

const stripePromise = loadStripe(
  process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY ?? ""
);

const Summary: NextPage = () => {
  const [eol, checkEol] = useState<boolean>(false);
  const [context, updateAppContext] = useAppContext();
  const router = useRouter();

  const { canceled, cart } = router.query;
  console.log(context.cart);

  const eolBorderColor = eol
    ? " border-re-green-500 group-hover:border-re-green-700"
    : " border-white group-hover:border-re-green-500";

  useEffect(() => {
    // Check to see if this is a redirect back from Checkout
    const query = new URLSearchParams(window.location.search);
    if (query.get("success")) {
      console.log("Order placed! You will receive an email confirmation.");
    }

    if (query.get("canceled")) {
      console.log(
        "Order canceled -- continue to shop around and checkout when youâ€™re ready."
      );
    }
  }, []);

  let items = [];
  for (let city in context.cart) {
    items.push(
      context.cart[city].map((sku) => (
        <div
          className="flex justify-evenly py-4 border-b-2"
          key={city + sku.title}
        >
          <div>
            <Image
              src={sku.image}
              height={160}
              width={160}
              alt={"takeout front"}
              className="rounded-2xl"
            />
          </div>
          <div className="flex flex-col justify-center w-68">
            <div className={"text-sm-25 text-white font-theinhardt"}>
              {sku.title.split(" ", 2).join(" ")}
            </div>
            <div className={"text-sm-25 text-white font-theinhardt"}>
              {sku.title.split(" ").slice(2).join(" ").padEnd(22)}
            </div>
            <div className="text-28 text-white font-theinhardt font-bold">
              {"x " + sku.quantity}
            </div>
          </div>
          <div className="flex flex-col pb-2 justify-between">
            <div className="text-sm text-re-green-500 text-right">
              {context.locations.length > 1 ? city : ""}
            </div>
            <div>
              <button className="text-white text-25 font-theinhardt-300 border-2 border-white px-4 py-1 rounded-10 mr-2">
                Edit
              </button>
              <button className="text-white hover:text-red-400 text-28">
                &times;
              </button>
            </div>
          </div>
        </div>
      ))
    );
  }

  return (
    <div className="w-screen h-screen bg-black flex">
      <Head>
        <title>Find your perfect setup</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <ProgressBar pageName="summary" />
      <ReLogo />
      <main className="flex flex-col container mx-auto h-full justify-evenly py-3 items-center">
        <h1 className="text-5xl font-theinhardt text-white text-center">
          Your perfect setup
        </h1>
        <div className="bg-re-gray h-100 rounded-2xl w-7/10 overflow-auto">
          {items}
        </div>
        <div className="group relative px-2 pt-2">
          {eol && (
            <div className="bg-re-green-500 h-6 w-6 z-10 rounded-full pl-1 absolute right-0 top-0 group-hover:bg-re-green-700">
              <Image
                src="/icons/check.png"
                height={10}
                width={15}
                alt="check mark"
              />
            </div>
          )}
          <button
            className={
              "border-2 text-25 text-white font-theinhardt-300 py-1 px-6 rounded-10" +
              eolBorderColor
            }
            onClick={() => checkEol((prev) => !prev)}
          >
            Agree to EOL policy
          </button>
        </div>
        <Link href={"checkout"}>
          <button
            className={
              "bg-re-green-500 w-124 text-25 font-theinhardt rounded-10 py-2 disabled:bg-gray-300"
            }
            type="submit"
            role="link"
            disabled={!eol}
          >
            {`Checkout: \$${context.calculateCost().toFixed(2)}`}
          </button>
        </Link>
      </main>
    </div>
  );
};

export default Summary;
