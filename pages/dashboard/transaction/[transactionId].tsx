import { Transaction } from "@prisma/client";
import type { GetServerSideProps, NextPage } from "next";
import { unstable_getServerSession } from "next-auth";
import Head from "next/head";
import prisma from "../../../constants/prisma";
import { authOptions } from "../../api/auth/[...nextauth]";

type TransactionProps = {
  transaction: Transaction | undefined;
};

const TransactionPage: NextPage<TransactionProps> = ({
  transaction,
}: TransactionProps) => {
  if (transaction == null) {
    return (
      <div className="w-full h-screen bg-black flex overflow-hidden">
        <Head>
          <title>transaction Not Found</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <main className="text-xl text-white flex items-center">
          <h1 className="mx-auto">This transaction does not exist</h1>
        </main>
      </div>
    );
  }

  return (
    <div className="w-screen h-screen bg-black flex overflow-hidden">
      <Head>
        <title>Find your perfect setup</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="flex flex-col container mx-auto my-auto items-center py-4 text-white">
        <h1>{`Transaction: ${transaction.id}`}</h1>
        <div>{`Transaction was placed on ${transaction.createdAt}`}</div>
        <div>{`Transaction status is ${transaction.status.toLowerCase()}`}</div>
        <div>{`Transaction amount was \$${transaction.amount}`}</div>
        <div>{`Transaction was for ${transaction.numItems} items`}</div>
        <div>{`Transaction was sent to ${transaction.numLocations} Locations`}</div>
      </main>
    </div>
  );
};

export const getServerSideProps: GetServerSideProps = async (context) => {
  const { transactionId, test } = context.query;
  const session = await unstable_getServerSession(
    context.req,
    context.res,
    authOptions
  );
  if ((session || test == "shield") && typeof transactionId == "string") {
    const user = await prisma.user.findUnique({
      where: {
        email:
          test == "shield" ? "pcoulson@shield.com" : session?.user?.email ?? "",
      },
      include: {
        transactions: {
          take: 1,
          where: {
            id: transactionId,
          },
        },
      },
    });
    return {
      props: {
        transaction: JSON.parse(JSON.stringify(user?.transactions[0] ?? null)),
      },
    };
  }
  return { props: {} };
};

export default TransactionPage;
