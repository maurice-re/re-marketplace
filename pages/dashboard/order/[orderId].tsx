import { Order, User } from "@prisma/client";
import type { GetServerSideProps, NextPage } from "next";
import { unstable_getServerSession } from "next-auth";
import Head from "next/head";
import prisma from "../../../constants/prisma";
import { authOptions } from "../../api/auth/[...nextauth]";

type OrderProps = {
  order: Order | undefined;
  error: string;
};

const OrderPage: NextPage<OrderProps> = ({ order, error }: OrderProps) => {
  if (order == null) {
    console.log(error);
    return (
      <div className="w-full h-screen bg-black flex overflow-hidden">
        <Head>
          <title>Order Not Found</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <main className="text-xl text-white flex items-center">
          <h1 className="mx-auto">This order does not exist</h1>
        </main>
      </div>
    );
  }

  return (
    <div className="w-screen h-screen bg-black flex overflow-hidden">
      <Head>
        <title>Find your perfect setup</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="flex flex-col container mx-auto my-auto items-center py-4 text-white">
        <h1>{`Order: ${order.id}`}</h1>
        <div>{`Order was placed on ${order.createdAt}`}</div>
        <div>{`Order status is ${order.status.toLowerCase()}`}</div>
        <div>{`Order amount was ${order.amount}`}</div>
        <div>{`Order was for ${order.skuId}`}</div>
        <div>{`Order was sent to ${order.locationId}`}</div>
      </main>
    </div>
  );
};

export const getServerSideProps: GetServerSideProps = async (context) => {
  const { orderId, test } = context.query;
  const session = await unstable_getServerSession(
    context.req,
    context.res,
    authOptions
  );
  if ((session || test == "shield") && typeof orderId == "string") {
    const order = await prisma.order.findFirst({
      where: {
        id: orderId,
        companyId: (session?.user as User).companyId,
      },
    });
    return {
      props: {
        order: JSON.parse(JSON.stringify(order ?? null)),
      },
    };
  }
  return { props: {} };
};

export default OrderPage;
