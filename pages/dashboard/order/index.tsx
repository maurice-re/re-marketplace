import { Order, Sku, User } from "@prisma/client";
import type { GetServerSideProps, NextPage } from "next";
import { unstable_getServerSession } from "next-auth";
import Head from "next/head";
import prisma from "../../../constants/prisma";
import { authOptions } from "../../api/auth/[...nextauth]";

type OrdersWithName = (Order & {
  sku: Sku & {
    product: {
      name: string;
    };
  };
})[];

type OrderProps = {
  orders: OrdersWithName | undefined;
};

const OrderHome: NextPage<OrderProps> = ({ orders }: OrderProps) => {
  if (orders == null) {
    return (
      <div className="w-full h-screen bg-black flex overflow-hidden">
        <Head>
          <title>Order Not Found</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <main className="text-xl text-white flex items-center">
          <h1 className="mx-auto">This order does not exist</h1>
        </main>
      </div>
    );
  }

  function formatDate(date: Date): string {
    const day = new Date(date);
    const month = day.toLocaleDateString("en-us", {
      month: "long",
    });
    return day.getDay() + " " + month + " " + day.getFullYear();
  }
  console.log(orders[0]);

  return (
    <div className="w-screen h-screen bg-black flex overflow-hidden">
      <Head>
        <title>Find your perfect setup</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="flex flex-col container mx-auto justify-center items-center py-4 text-white">
        <div className="flex flex-col bg-re-gray-500 bg-opacity-70 rounded-2xl px-10 py-6 w-full">
          <h1 className=" text-re-green-500 font-theinhardt text-2xl mb-2">
            Orders
          </h1>
          <div className=" h-px bg-white mb-4" />
          <div className="flex justify-evenly">
            <div className="flex flex-col gap-4 text-center">
              <div className="">Date</div>
              {orders.map((order) => (
                <div
                  className="border border-white py-4 px-5 rounded-lg"
                  key={order.id + " date"}
                >
                  {formatDate(order.createdAt)}
                </div>
              ))}
            </div>
            <div className="flex flex-col gap-4 text-center">
              <div className="">Product</div>
              {orders.map((order) => (
                <div
                  className="border border-white py-4 px-5 rounded-lg"
                  key={order.id + " product"}
                >
                  {order.sku.product.name}
                </div>
              ))}
            </div>
            <div className="flex flex-col gap-4 text-center">
              <div className="">Destination</div>
              {orders.map((order) => (
                <div
                  className="border border-white py-4 px-5 rounded-lg"
                  key={order.id + " location"}
                >
                  {order.locationId}
                </div>
              ))}
            </div>
            <div className="flex flex-col gap-4 text-center">
              <div className="">Status</div>
              {orders.map((order) => (
                <div
                  className="border border-white py-4 px-5 rounded-lg"
                  key={order.id + " status"}
                >
                  {order.status}
                </div>
              ))}
            </div>
          </div>
        </div>
        <div className="flex flex-col bg-re-gray-500 bg-opacity-70 rounded-2xl px-10 py-6 w-full my-8">
          <h1 className=" text-re-green-500 font-theinhardt text-2xl mb-2">
            Scheduled Orders
          </h1>
          <div className=" h-px bg-white mb-4" />
          <div className="flex"> Set up a recurring order</div>
        </div>
      </main>
    </div>
  );
};

export const getServerSideProps: GetServerSideProps = async (context) => {
  const { test } = context.query;
  const session = await unstable_getServerSession(
    context.req,
    context.res,
    authOptions
  );
  if (session || test == "shield") {
    const orders = await prisma.order.findMany({
      where: {
        companyId: test == "shield" ? "616" : (session?.user as User).companyId,
      },
      include: {
        sku: {
          include: {
            product: {
              select: {
                name: true,
              },
            },
          },
        },
      },
    });
    return {
      props: {
        orders: JSON.parse(JSON.stringify(orders ?? null)),
      },
    };
  }
  return { props: {} };
};

export default OrderHome;
