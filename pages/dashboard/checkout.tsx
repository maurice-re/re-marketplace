import {
  Company,
  Location,
  Product,
  ProductDevelopment,
  Sku,
  User,
} from "@prisma/client";
import { Elements } from "@stripe/react-stripe-js";
import { Appearance, loadStripe, PaymentMethod } from "@stripe/stripe-js";
import type { GetServerSideProps, NextPage } from "next";
import { unstable_getServerSession } from "next-auth";
import Head from "next/head";
import { useEffect, useState } from "react";
import LineItems from "../../components/checkout/lineItems";
import Totals from "../../components/checkout/totals";
import CheckoutInfo from "../../components/dashboard/checkoutInfo";
import ReLogo from "../../components/form/re-logo";
import prisma from "../../constants/prisma";
import { getOrderStringTotal } from "../../utils/dashboard/orderStringUtils";
import { authOptions } from "../api/auth/[...nextauth]";

export enum CheckoutType {
  ERROR,
  ORDER,
  PRODUCT_DEVELOPMENT,
  SAMPLE,
}

const stripePromise = loadStripe(
  process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY ?? ""
);

const appearance: Appearance = {
  theme: "night",
  variables: {
    colorPrimary: "#58FEC4",
  },
};

type CheckoutProps = {
  company: Company | null;
  locations: Location[] | null;
  loggedIn: boolean | null;
  orderString: string;
  productDevelopment: ProductDevelopment | null;
  products: Product[] | null;
  skus: Sku[] | null;
  type: CheckoutType;
  user: User | null;
};

const DashboardCheckout: NextPage<CheckoutProps> = ({
  company,
  locations,
  orderString,
  productDevelopment,
  products,
  skus,
  type,
  user,
}: CheckoutProps) => {
  const [clientSecret, setClientSecret] = useState("");
  const [paymentIntentId, setPaymentIntentId] = useState("");
  const [paymentMethods, setPaymentMethods] = useState<PaymentMethod[]>([]);
  const [customerId, setCustomerId] = useState(
    company ? company.customerId : ""
  );

  useEffect(() => {
    fetch("/api/payment/create", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        cost: getTotal(),
        id: customerId,
      }),
    })
      .then((res) => res.json())
      .then((data) => {
        setClientSecret(data.clientSecret);
        setPaymentIntentId(data.paymentIntentId ?? "");
        setPaymentMethods(data.paymentMethods ?? []);
      });
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  function getTotal(): number {
    if (type == CheckoutType.PRODUCT_DEVELOPMENT && productDevelopment) {
      return (
        (productDevelopment.developmentFee + productDevelopment.researchFee) *
        productDevelopment.split
      );
    }

    if (type == CheckoutType.ORDER && products && skus) {
      return getOrderStringTotal(orderString, products, skus, 1.07);
    }
    return 0;
  }

  const options = {
    clientSecret,
    appearance,
  };
  return (
    <div className="w-screen h-screen bg-black flex items-center justify-center text-white">
      <Head>
        <title>Find your perfect setup</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <ReLogo />

      <main className="flex p-6 columns-2 mx-20 my-1 h-screen">
        <div className="flex-column items-start w-1/2 h-full overflow-auto mr-4">
          <h2 className="text-lg">Pay Re Company</h2>
          <h1 className=" text-4xl font-semibold pb-4">{`$${getTotal()}`}</h1>
          {LineItems({
            locations: locations,
            orderString: orderString,
            skus: skus,
            productDevelopment: productDevelopment,
            products: products,
            type: type,
          })}
          <div className="ml-16 mr-6 border my-4" />
          {Totals({
            orderString: orderString,
            skus: skus,
            productDevelopment: productDevelopment,
            products: products,
            type: type,
          })}
        </div>
        <div className="w-1/2 h-full">
          {clientSecret && (
            // eslint-disable-next-line
            <Elements options={options} stripe={stripePromise}>
              <CheckoutInfo
                company={company}
                customerId={customerId}
                locations={locations}
                orderString={orderString}
                paymentMethods={paymentMethods}
                paymentIntentId={paymentIntentId}
                productDevelopment={productDevelopment}
                products={products}
                skus={skus}
                type={type}
                user={user}
              />
            </Elements>
          )}
        </div>
      </main>
    </div>
  );
};

export const getServerSideProps: GetServerSideProps = async (context) => {
  const { orderString } = context.query;
  if (typeof orderString == "string") {
    // Product Development
    if (orderString.startsWith("product-development")) {
      const [_, devId] = orderString.split("~");
      const productDev = await prisma.productDevelopment.findUnique({
        where: { id: devId },
      });
      if (productDev == null) {
        return { props: { type: CheckoutType.ERROR } };
      } else if (productDev.companyId == null) {
        return {
          props: {
            productDevelopment: JSON.parse(JSON.stringify(productDev)),
            type: CheckoutType.PRODUCT_DEVELOPMENT,
          },
        };
      } else {
        const session = await unstable_getServerSession(
          context.req,
          context.res,
          authOptions
        );
        const company = await prisma.company.findUnique({
          where: { id: productDev.companyId },
        });
        const sessionUser = session == null ? null : (session?.user as User);
        return {
          props: {
            company: JSON.parse(JSON.stringify(company)),
            productDevelopment: JSON.parse(JSON.stringify(productDev)),
            loggedIn: JSON.parse(
              JSON.stringify(
                sessionUser == null
                  ? false
                  : sessionUser.companyId == company?.id
              )
            ),
            type: CheckoutType.PRODUCT_DEVELOPMENT,
            user: JSON.parse(JSON.stringify(sessionUser)),
          },
        };
      }
    }

    // Sample

    // Order
    const session = await unstable_getServerSession(
      context.req,
      context.res,
      authOptions
    );
    const user = await prisma.user.findFirst({
      where: {
        email: session?.user?.email ?? "",
      },
      include: {
        company: {
          include: {
            locations: true,
          },
        },
      },
    });

    const allSkus = await prisma.sku.findMany();
    const allProducts = await prisma.product.findMany();
    return {
      props: {
        company: user
          ? JSON.parse(JSON.stringify(user.company as Company))
          : null,
        user: user ? JSON.parse(JSON.stringify(user as User)) : null,
        locations: user ? (user.company.locations as Location[]) : [],
        orderString: orderString,
        products: allProducts,
        skus: allSkus,
        type: CheckoutType.ORDER,
      },
    };
  }

  return { props: {} };
};

export default DashboardCheckout;
