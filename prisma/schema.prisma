// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id            String  @id @default(cuid())
  access_token  String? @db.Text
  expires_at    Int?
  id_token      String? @db.Text
  provider      String
  providerId    String
  refresh_token String? @db.Text
  scope         String?
  session_state String?
  token_type    String?
  type          String
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String

  @@unique([provider, providerId])
  @@index([userId])
}

model ApiKey {
  id    String  @id
  admin Boolean @default(false)
}

model ApiLogging {
  id       Int      @id @default(autoincrement())
  calledAt DateTime @default(now())
  message  String?
  route    String
  success  Boolean
}

model Company {
  id                  String               @id @default(cuid())
  createdAt           DateTime
  customerId          String
  name                String
  productDevelopments ProductDevelopment[]
  subscriptionType    SubscriptionType     @default(FREE)
  users               User[]
}

model Event {
  id         String   @id @default(cuid())
  action     Action
  companyId  String
  consumerId String?
  itemId     String?
  location   Location @relation(fields: [locationId], references: [id])
  locationId String
  sku        Sku?     @relation(fields: [skuId], references: [id])
  skuId      String?
  timestamp  DateTime @default(now())

  @@index([locationId])
  @@index([skuId])
}

model Group {
  id        String     @id @default(cuid())
  createdAt DateTime
  name      String
  locations Location[]
  user      User     @relation(fields: [userId], references: [id])
  userId    String

  @@index([userId])

}

model Hardware {
  id         String   @id @default(cuid())
  location   Location @relation(fields: [locationId], references: [id])
  locationId String
  notes      String?
  return     Boolean  @default(false)

  @@index([locationId])
}

enum Action {
  BORROW
  EOL
  LOST
  RETURN
}

model Image {
  id    Int    @id @default(autoincrement())
  rank  Int
  skus  Sku[]
  skuId Int
  uri   String
}

model Location {
  id           String               @id @default(cuid())
  city         String?
  country      String?
  displayName  String?
  events       Event[]
  groups       Group[]
  hardware     Hardware[]
  line1        String?
  line2        String?
  orders       Order[]
  owners       User[]               @relation(name: "LocationOwners")
  penalty      Penalty              @default(NONE)
  sampleOrders SampleOrder[]
  settings     Settings?
  shippingName String?
  state        String?
  trackingType TrackingType         @default(NONE)
  type         LocationType         @default(SHIPPING)
  untracked    UntrackedInventory[]
  viewers      User[]               @relation(name: "LocationViewers")
  zip          String?
}

enum LocationType {
  SHIPPING
  SAMPLE
  TRACKING
}

model Order {
  id         String      @id @default(cuid())
  amount     Float
  createdAt  DateTime
  items      OrderItem[]
  location   Location    @relation(fields: [locationId], references: [id])
  locationId String      @default("")
  status     Status      @default(SUBMITTED)
  user       User        @relation(fields: [userId], references: [id])
  userId     String
  paymentId  String?

  @@index([locationId])
  @@index([userId])
}

model OrderItem {
  id         String    @id @default(cuid())
  amount     Float
  comments   String?
  createdAt  DateTime
  order      Order     @relation(fields: [orderId], references: [id])
  orderId    String
  quantity   Int
  qrCode     Boolean   @default(false)
  receivedAt DateTime?
  shippedAt  DateTime?
  sku        Sku       @relation(fields: [skuId], references: [id])
  skuId      String
  status     Status    @default(SUBMITTED)

  @@index([orderId])
  @@index([skuId])
}

model Product {
  id          String  @id @default(cuid())
  active      Boolean @default(true)
  colors      String
  description String?
  mainImage   String
  materials   String
  name        String
  sizes       String
  skus        Sku[]
}

enum Penalty {
  NONE
  DEPOSIT
}

model ProductDevelopment {
  id               String    @id
  company          Company?  @relation(fields: [companyId], references: [id])
  companyId        String?
  companyName      String
  completionPaid   Boolean   @default(false)
  createdAt        DateTime  @default(now())
  developmentFee   Float
  initiationPaid   Boolean   @default(false)
  initiationPaidAt DateTime?
  researchFee      Float
  split            Float     @default(0.7)
  status           Status    @default(PROPOSED)

  @@index([companyId])
}

enum Region {
  NORTH_AMERICA
  ASIA
}

model SampleOrder {
  id         String   @id @default(cuid())
  quantity   Int
  amount     Float
  location   Location @relation(fields: [locationId], references: [id])
  locationId String
  createdAt  DateTime
  skuIds     String
  status     Status   @default(SUBMITTED)

  @@index([locationId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Settings {
  id                 String   @id @default(cuid())
  borrowReturnBuffer Int?
  location           Location @relation(fields: [locationId], references: [id])
  locationId         String   @unique @default("")
}

model Sku {
  id            String               @id @default(cuid())
  color         String
  events        Event[]
  images        Image[]
  mainImage     String
  material      String
  materialShort String
  orderItems    OrderItem[]
  product       Product              @relation(fields: [productId], references: [id])
  productId     String
  priceTable    String               @default("0:10")
  untracked     UntrackedInventory[]
  size          String

  @@index([productId])
}

enum Status {
  PROPOSED
  SUBMITTED
  ACCEPTED
  PROCESSING
  SHIPPING_PROVIDER
  SHIPPED
  COMPLETED
  PARTIAL_COMPLETED
}

enum SubscriptionType {
  FREE
  PREMIUM
  PREMIUM_PLUS
}

enum TrackingType {
  NONE
  USER
  CONTAINER
  BOTH
}

model UntrackedInventory {
  location   Location @relation(fields: [locationId], references: [id])
  locationId String
  sku        Sku      @relation(fields: [skuId], references: [id])
  skuId      String
  quantity   Int

  @@unique([locationId, skuId])
  @@index([skuId])
}

model User {
  id                String     @id @default(cuid())
  accounts          Account[]
  company           Company    @relation(fields: [companyId], references: [id])
  companyId         String
  createdAt         DateTime
  email             String     @unique()
  emailVerified     DateTime?
  firstName         String?
  groups            Group[]
  lastName          String?
  ownedLocations    Location[] @relation(name: "LocationOwners")
  viewableLocations Location[] @relation(name: "LocationViewers")
  manufacturer      Boolean    @default(false)
  orders            Order[]
  reEmployee        Boolean    @default(false)
  sessions          Session[]

  @@index([companyId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
