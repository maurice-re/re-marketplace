// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id            String  @id @default(cuid())
  access_token  String? @db.Text
  expires_at    Int?
  id_token      String? @db.Text
  provider      String
  providerId    String
  refresh_token String? @db.Text
  scope         String?
  session_state String?
  token_type    String?
  type          String
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String

  @@unique([provider, providerId])
  @@index([userId])
}

enum Action {
  BORROW
  EOL
  LOST
  RETURN
}

model ApiKey {
  id        String  @id
  company   Company @relation(fields: [companyId], references: [id])
  companyId String  @unique
  admin     Boolean @default(false)
}

model ApiLogging {
  id       Int      @id @default(autoincrement())
  calledAt DateTime @default(now())
  message  String?
  route    String
  success  Boolean
}

model Company {
  id                  String               @id @default(cuid())
  apiKey              ApiKey?
  createdAt           DateTime
  customerId          String
  events              Event[]
  name                String
  productDevelopments ProductDevelopment[]
  subscriptionType    SubscriptionType     @default(FREE)
  untracked           UntrackedInventory[]
  users               User[]
}

model Event {
  id               String   @id @default(cuid())
  action           Action
  company          Company  @relation(fields: [companyId], references: [id])
  companyId        String
  consumerId       String?
  itemId           String?
  location         Location @relation(fields: [locationId], references: [id])
  locationId       String
  sku              Sku?     @relation(fields: [skuId], references: [id])
  skuId            String?
  timestamp        DateTime @default(now())
  trackingLocation String?

  @@index([skuId])
  @@index([locationId])
  @@index([companyId])
}

model Group {
  id        String     @id @default(cuid())
  createdAt DateTime
  name      String
  locations Location[]
}

enum Action {
  BORROW
  EOL
  LOST
  RETURN
}

model Image {
  id    Int    @id @default(autoincrement())
  rank  Int
  skus  Sku[]
  skuId Int
  uri   String
}

model Location {
  id               String        @id @default(cuid())
  city             String?
  country          String?
  displayName      String?
  events           Event[]
  group            Group         @relation(fields: [groupId], references: [id])
  groupId          String
  line1            String?
  line2            String?
  orderItems       OrderItem[]
  owners           User[]        @relation(name: "LocationOwners")
  sampleOrders     SampleOrder[]
  settings         Settings?
  shippingName     String?
  state            String?
  trackingLocation String?
  trackingType     TrackingType  @default(NONE)
  type             LocationType  @default(SHIPPING)
  viewers          User[]        @relation(name: "LocationViewers")
  zip              String?

  @@index([tagId])
  @@index([companyId])
}

enum LocationType {
  SHIPPING
  SAMPLE
  TRACKING
}

model Order {
  id        String      @id @default(cuid())
  amount    Float
  createdAt DateTime
  items     OrderItem[]
  status    Status      @default(SUBMITTED)
  user      User        @relation(fields: [userId], references: [id])
  userId    String
  paymentId String?

  @@index([userId])
  @@index([companyId])
}

model OrderItem {
  id         String    @id @default(cuid())
  amount     Float
  comments   String?
  createdAt  DateTime
  location   Location  @relation(fields: [locationId], references: [id])
  locationId String
  order      Order     @relation(fields: [orderId], references: [id])
  orderId    String
  quantity   Int
  qrCode     Boolean   @default(false)
  receivedAt DateTime?
  shippedAt  DateTime?
  sku        Sku       @relation(fields: [skuId], references: [id])
  skuId      String
  status     Status    @default(SUBMITTED)

  @@index([skuId])
  @@index([orderId])
  @@index([locationId])
}

enum Penalty {
  NONE
  DEPOSIT
}

model Product {
  id          String  @id @default(cuid())
  active      Boolean @default(true)
  colors      String
  description String?
  mainImage   String
  materials   String
  name        String
  sizes       String
  skus        Sku[]
}

model ProductDevelopment {
  id               String    @id
  company          Company?  @relation(fields: [companyId], references: [id])
  companyId        String?
  companyName      String
  completionPaid   Boolean   @default(false)
  createdAt        DateTime  @default(now())
  developmentFee   Float
  initiationPaid   Boolean   @default(false)
  initiationPaidAt DateTime?
  researchFee      Float
  split            Float     @default(0.7)
  status           Status    @default(PROPOSED)

  @@index([companyId])
}

enum Region {
  NORTH_AMERICA
  ASIA
}

enum Role {
  ADMIN
  USER
}

model SampleOrder {
  id         String   @id @default(cuid())
  quantity   Int
  amount     Float
  location   Location @relation(fields: [locationId], references: [id])
  locationId String
  createdAt  DateTime
  skuIds     String
  status     Status   @default(SUBMITTED)

  @@index([locationId])
  @@index([companyId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Settings {
  id                 String   @id @default(cuid())
  borrowReturnBuffer Int?
  location           Location @relation(fields: [locationId], references: [id])
  locationId         String   @unique
}

model Sku {
  id            String               @id @default(cuid())
  color         String
  events        Event[]
  images        Image[]
  mainImage     String
  material      String
  materialShort String
  orderItems    OrderItem[]
  product       Product              @relation(fields: [productId], references: [id])
  productId     String
  priceTable    String               @default("0:10")
  untracked     UntrackedInventory[]
  size          String

  @@index([productId])
}

enum Status {
  PROPOSED
  SUBMITTED
  ACCEPTED
  PROCESSING
  SHIPPING_PROVIDER
  SHIPPED
  COMPLETED
  PARTIAL_COMPLETED
}

enum SubscriptionType {
  FREE
  PREMIUM
  PREMIUM_PLUS
}

model UntrackedInventory {
  company   Company @relation(fields: [companyId], references: [id])
  companyId String
  sku       Sku     @relation(fields: [skuId], references: [id])
  skuId     String
  quantity  Int

  @@unique([companyId, skuId])
  @@index([skuId])
}

model User {
  id                String     @id @default(cuid())
  accounts          Account[]
  company           Company    @relation(fields: [companyId], references: [id])
  companyId         String
  createdAt         DateTime
  email             String     @unique()
  emailVerified     DateTime?
  firstName         String?
  lastName          String?
  ownedLocations    Location[] @relation(name: "LocationOwners")
  viewableLocations Location[] @relation(name: "LocationViewers")
  manufacturer      Boolean    @default(false)
  orders            Order[]
  reEmployee        Boolean    @default(false)
  role              Role
  sessions          Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
