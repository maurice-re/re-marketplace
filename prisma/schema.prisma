// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
  binaryTargets   = ["darwin-arm64"]
}

model Account {
  id            String  @id @default(cuid())
  access_token  String? @db.Text
  expires_at    Int?
  id_token      String? @db.Text
  provider      String
  providerId    String
  refresh_token String? @db.Text
  scope         String?
  session_state String?
  token_type    String?
  type          String
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String

  @@unique([provider, providerId])
}

model ApiKey {
  id        String  @id
  company   Company @relation(fields: [companyId], references: [id])
  companyId String  @unique
  admin     Boolean @default(false)
}

model ApiLogging {
  id       Int      @id @default(autoincrement())
  calledAt DateTime @default(now())
  message  String?
  route    String
  success  Boolean
}

model Company {
  id                  String                @default(cuid()) @id
  apiKey              ApiKey?
  createdAt           DateTime
  customerId          String
  events              Event[]
  locations           Location[]
  name                String
  orders              Order[]
  productDevelopments ProductDevelopment[]
  sampleOrders        SampleOrder[]
  subscriptionType    SubscriptionType      @default(FREE)
  untracked           UntrackedInventory[]
  users               User[]
}

model Event {
  id               String    @id @default(cuid())
  action           Action
  company          Company   @relation(fields: [companyId], references: [id])
  companyId        String
  consumerId       String?
  itemId           String
  location         Location? @relation(fields: [locationId], references: [id])
  locationId       String?
  sku              Sku       @relation(fields: [skuId], references: [id])
  skuId            String
  timestamp        DateTime  @default(now())
  trackingLocation String?
}

enum Action {
  BORROW
  EOL
  LOST
  RETURN
}

model Image {
  id    Int    @id @default(autoincrement())
  rank  Int
  skus  Sku[]
  skuId Int
  uri   String
}

model Location {
  id                String        @default(cuid()) @id
  city              String?
  country           String?
  company           Company       @relation(fields: [companyId], references: [id])
  companyId         String
  displayName       String?
  events            Event[]       @relation(fields: [])
  line1             String?
  line2             String?
  orderItems        OrderItem[]
  sampleOrders      SampleOrder[]
  shippingName      String?
  state             String?
  trackingLocation  String?
  type              LocationType  @default(SHIPPING)
  zip               String?
}


enum LocationType {
  SHIPPING
  SAMPLE
  TRACKING
}

model Order {
  id              String                @default(cuid()) @id
  amount          Float
  company         Company               @relation(fields: [companyId], references: [id])
  companyId       String
  createdAt       DateTime
  items           OrderItem[]
  status          Status                @default(SUBMITTED)
  user            User                  @relation(fields: [userId], references: [id])
  userId          String
}

model OrderItem {
  id              String        @default(cuid()) @id
  amount          Float
  comments        String?
  createdAt       DateTime
  location        Location      @relation(fields: [locationId], references: [id])
  locationId      String
  order           Order         @relation(fields: [orderId], references: [id])
  orderId         String
  quantity        Int
  qrCode          Boolean       @default(false)
  receivedAt      DateTime?
  shippedAt       DateTime?
  sku             Sku           @relation(fields: [skuId], references: [id])
  skuId           String
  status          Status        @default(SUBMITTED)
}

model Product {
  id         String  @id @default(cuid())
  active     Boolean @default(true)
  colors     String
  mainImage  String
  materials  String
  name       String
  sizes      String
  skus       Sku[]
}

model ProductDevelopment {
  id              String   @id
  company         Company? @relation(fields: [companyId], references: [id])
  companyId       String?
  companyName     String
  completionPaid  Boolean  @default(false)
  createdAt       DateTime @default(now())
  developmentFee  Float
  initiationPaid  Boolean  @default(false)
  researchFee     Float
  status          Status   @default(PROPOSED)
}

enum Region {
  NORTH_AMERICA
  ASIA
}

enum Role {
  ADMIN
  USER
}

model SampleOrder {
  id         String   @id @default(cuid())
  quantity   Int
  amount     Float
  location   Location @relation(fields: [locationId], references: [id])
  locationId String
  company    Company  @relation(fields: [companyId], references: [id])
  companyId  String
  createdAt  DateTime
  skuIds     String
  status     Status   @default(SUBMITTED)
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Sku {
  id            String               @id @default(cuid())
  color         String
  events        Event[]
  images        Image[]
  mainImage     String
  material      String
  materialShort String
  orderItems    OrderItem[]
  product       Product              @relation(fields: [productId], references: [id])
  productId     String
  priceTable    String               @default("0:10")
  untracked     UntrackedInventory[]
  size          String
}

enum Status {
  PROPOSED
  SUBMITTED
  ACCEPTED
  PROCESSING
  SHIPPING
  COMPLETED
  PARTIAL_COMPLETED
}

enum SubscriptionType {
  FREE
  PREMIUM
  PREMIUM_PLUS
}

model UntrackedInventory {
  company         Company       @relation(fields: [companyId], references: [id])
  companyId       String
  sku             Sku           @relation(fields: [skuId], references: [id])
  skuId           String
  quantity        Int

  @@unique([companyId, skuId])
}

model User {
  id              String        @default(cuid()) @id
  accounts        Account[]
  company         Company       @relation(fields: [companyId], references: [id])
  companyId       String         
  createdAt       DateTime
  email           String        @unique()
  emailVerified   DateTime?
  firstName       String?
  lastName        String?
  manufacturer    Boolean       @default(false)
  orders          Order[]
  reEmployee      Boolean       @default(false)
  role            Role
  sessions        Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
